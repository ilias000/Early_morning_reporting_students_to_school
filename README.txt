ΕΝΤΟΛΗ ΜΕΤΑΓΛΩΤΤΙΣΗΣ ΚΑΙ ΕΚΤΕΛΕΣΗΣ

ΕΝΤΟΛΗ ΜΕΤΑΓΛΩΤΤΙΣΗΣ  : g++ -std=c++11 Main.cpp School.cpp Yard.cpp Staircase.cpp Floor.cpp Corridor.cpp Classroom.cpp Student.cpp Teacher.cpp -o exe
ΕΝΤΟΛΗ ΕΚΤΕΛΕΣΗΣ : ./exe 1 20 10 10


ΓΕΝΙΚΑ

Έχω φτιάξει 7 αρχεία .h για τις κλάσεις, 7 αρχεία .cpp για την υλοποίηση των συναρτήσεων της κάθε κλάσης και 1 αρχείο .cpp για την main.
Χρησιμοποιώ include guards για να αποφύγω το πρόβλημα του double inclusion.
Χρησιμοποίησα κυρίως δείκτες και πινάκες δεικτών σε αντικείμενα κλάσεων γιατί ήθελα να εξασκηθώ σε αυτό το κομμάτι.
Πολλές εξηγήσεις για το τι είναι και γιατί χρησιμοποιήθηκαν κάποια κομμάτια κώδικα γίνονται σε σχόλια μέσα στον κώδικα οπότε δεν θα τα ξανά αναφέρω και εδώ.
Τις κλάσεις τις χώρισα σε ξεχωριστά αρχεία για να είναι πιο εύκολη η συγγραφή, ανάγνωση και συντήρηση του κώδικα
Στις κλάσεις χρησιμοποιώ private και public μέρη γιατί ο χρήστης της κλάσης θέλω να έχει πρόσβαση μόνο μέσα από τις συναρτήσεις που του προσφέρω στο public κομμάτι. Έτσι επιβάλω encapsulation στον ορισμό των τύπων μου.
Όσες συναρτήσεις θεώρησα μικρές που συνήθως ήταν geters τις όρισα μέσα στην αντίστοιχη class για να είναι inline.
Η υλοποίηση μου χρησιμοποιεί την εισαγωγή γύρω από σύνολα μαθητών, δηλαδή γεμίζω όσο μπορώ ένα χώρο και μετά προχωράω πιο μέσα και γεμίζω όσο μπορώ τον επόμενο κτλπ.



MAIN

Τα δεδομένα για τις μαξ χωρητικότητες των αντίστοιχων χώρων τα έχω κάνει να δίνονται με την εντολή εκτέλεσης του προγράμματος. 
Αρχικά αποθηκεύω τα δεδομένα που πήρα από τη εντολή εκτέλεσης σε αντίστοιχες μεταβλητές μετατρέποντας τα σε ακέραιους με την stoi() για αυτό έχω και το -std=c++11 στην εντολή μεταγλώτισης.
Έπειτα δημιουργούμε ένα άδειο σχολειό χρησιμοποιώντας τα δεδομένα που πήραμε από τη εντολή κλήσης.
Μετά φτιάχνουμε τόσους μαθητές όσους χρειάζεται για να γεμίσουν όλες οι τάξεις με τυχαία ονόματα και τους αναθέτουμε όροφο και αντίστοιχη τάξη με τη σειρά δηλαδή ο πρώτος θα πάει στον πρώτο όροφο πρώτη τάξη όπως και όλοι οι επόμενοι μέχρι να γεμίσει αυτή η τάξη και μετά θα πάμε στο πρώτο όροφο δεύτερη τάξη κτλπ.
Στη συνέχεια φτιάχνουμε τους καθηγητές με τυχαία ονόματα αλλά τους αναθέτουμε με την σειρά σε όροφο και τάξεις αντίστοιχα δηλαδή ο πρώτος καθηγητής που δημιουργούμε θα πάει στον πρώτο όροφο πρώτη τάξη ο δεύτερος θα πάει στον πρώτο όροφο δεύτερη τάξη κτλπ.
Μετά μέσα σε μια do-while καλώ την enter του school περνώντας για ορίσματα το πίνακα με τους μαθητές, τον αριθμό των μαθητών που περιμένουν να μπουν την συγκεκριμένη χρονική στιγμή και τον αριθμό όλων μαθητών και μου επιστρέφει true αν μπόρεσε να μπει κάποιος μαθητής στον επόμενο χώρο από αυτόν που βρίσκεται είτε μέσα στο σχολειό είτε στην τάξη του για να μπορέσω να το χρησιμοποιήσω στο while για να ελέγξω ποτέ θα σταματήσει η επανάληψη. Έπειτα με την χρήση της rand παίρνω έναν αριθμό από το 0 μέχρι τον αριθμό των δασκάλων που δεν έχουν μπει ακόμα στις τάξεις τους που καθορίζει αν θα μπουν και αν ναι πόσοι δάσκαλοι σε αυτήν την επανάληψη. Οι δάσκαλοι που θα μπουν βρίσκονται με τυχαίο τρόπο χρησιμοποιώντας την rand κάθε φορά που θέλω να βάλω έναν δάσκαλο, η rand θα μου δώσει έναν τυχαίο αριθμό από το 0 μέχρι το 17 και θα χρησιμοποιήσω αυτόν τον αριθμό για να πάρω τον αντίστοιχο δάσκαλο με index αυτόν τον αριθμό από τον πίνακα των δάσκαλων. Υπάρχει περίπτωση αυτός ο δάσκαλος να έχει μπει ήδη στην τάξη του οπότε θα ξανά καλέσουμε την rand μέχρι να βρούμε δάσκαλο που δεν έχει μπει στην τάξη του. Αφού βρούμε τον δάσκαλο που θα μπει τον βάζουμε στην τάξη του καλώντας την place του school, σβήνουμε τον δάσκαλο από τον πινάκα με τους δάσκαλους και μειώνουμε κατά ένα τον μετρητή των δάσκαλων που δεν έχουν μπει ακόμα στις τάξεις τους. Η do-while θα συνεχίζει να εκτελείται όσο δεν έχουν μπει όλοι οι μαθητές στις τάξεις τους που το ελέγχουμε με τη βοήθεια της συνάρτησης getNumberOfStudentsInClass η οποία επιστρέφει τον αριθμό των μαθητών που έχουν μπει στις τάξεις τους και ταυτόχρονα όσο μπορεί κάποιος μαθητής να προχωρήσει προς την τάξη του που μας το λέει η enter του school.
Στη συνεχεία εκτυπώνουμε το σχολικό κτίριο και καταστρέφουμε όσους μαθητές και δάσκαλους δεν μπήκαν στο σχολείο.


SCHOOL

Στην κλάση του σχολείου έχω αναπαραστήσει τους ορόφους με έναν πινάκα δεικτών 3 θέσεων σε αντικείμενα τύπου Floor (είναι η κλάση για τον όροφο), την άυλη με ένα αντικείμενο της κλάσης Yard και τις σκάλες με ένα αντικείμενο της κλάσης Staircase.
Ο constructor αρχικοποιει το μέγιστο αριθμό μαθητών της αυλής και του κλιμακοστασίου αντίστοιχα δίνοντας στους αντίστοιχους constructor τις αντίστοιχες μεταβλητές και για κάθε θέση του πίνακα με τους ορόφους δημιουργεί ένα αντικείμενο της κλάσης Floor και αρχικοποιει τον μέγιστο αριθμό μαθητών της κάθε τάξης και του διαδρόμου αντίστοιχα καλώντας τον constructor του ορόφου και βάζει τον δείκτη αυτής της θέσης του πίνακα να δείχνει σε αυτό τον αντικείμενο.
Ο destructor φροντίζει για την αποδέσμευση του χώρου του πίνακα με τους ορόφους.
Έχω φτιάξει μια συνάρτηση enter που δέχεται έναν πινάκα με όλους τους μαθητές που περιμένουν να μπουν στο σχολειό, τον αριθμό των μαθητών που περιμένουν να μπουν στο σχολειό τον οποίο τον περνάω με reference γιατί κάθε φορά που βάζω κάποιον μαθητή στο σχολειό θέλω να τον μειώνω αυτόν τον αριθμό άλλα η επόμενη κλήση της συνάρτησης να γίνει με το σωστό αριθμό που περιμένουν να μπουν και μια μεταβλητή με τον συνολικό αριθμό των μαθητών η οποία είναι και const για να σιγουρευτούμε ότι δεν θα την αλλάξουμε κατά λαθος. Η συνάρτηση επιστρέφει μια τιμή bool η οποία θα είναι true αν μπορέσουμε να βάλουμε έναν μαθητή μέσα στο σχολειό ή αν μπόρεσε κάποιος μαθητής να προχωρήσει στον επόμενο χώρο από αυτόν που βρίσκεται ήδη. Αρχικά ελέγχουμε αν χωράει να μπει ένας μαθητής στο προαύλιο και αν χωράει θα διαλέξουμε έναν τυχαίο μαθητή από τον πινάκα των μαθητών που να μην έχει μπει ήδη στο σχολείο θα τον περάσουμε στην συνάρτηση enter του school που δέχεται έναν μαθητή, θα τον βγάλουμε από τον πινάκα με τους μαθητές που περιμένουν να μπουν στο σχολειό θα αφαιρέσουμε κατά ένα την μεταβλητή που κρατάει το πλήθος των μαθητών που περιμένουν να μπουν στο σχολειό και αυτό θα γίνεται είτε μέχρι να μην υπάρχουν άλλοι μαθητές να μπουν στο σχολειό είτε μέχρι να μην χωράνε άλλοι στην άυλη.
Στην συνέχεια θα βάλουμε έναν δείκτη σε δείκτη να δείχνει τον πίνακα με τους μαθητές που έχουν μπει στην αυλή χρησιμοποιώντας τη συνάρτηση της αυλή getStudents η οποία μας επιτρέπει να επεξεργαστούμε τον πίνακα με τους μαθητές της αυλής και αφού δούμε αν χωράει κάποιος μαθητής να μπει στο κλιμακοστάσιο θα πάρουμε τον πρώτο μαθητή που υπάρχει στον πινάκα και θα τον βάλουμε στο κλιμακοστάσιο καλώντας πρώτα την συνάρτηση exit της αυλής που της δίνουμε τον μαθητή που θέλουμε να βγει και εκείνη θα τον βρει στον πίνακα της αυλής και θα τον βγάλει και έπειτα καλούμε την enter του κλιμακοστασίου. Αυτό θα γίνεται είτε μέχρι να τελειώσουν οι μαθητές που είναι στην αυλή είτε μέχρι να μην χωράνε άλλοι στο κλιμακοστάσιο. 
H if(yardStudent[i] == NULL){continue;} υπάρχει γιατί δεν βάζω κάθε φορά τον μαθητή που μπήκε πρώτος στην αυλή στο κλιμακοστάσιο αλλά τον πρώτο που θα βρει στον πίνακα (δηλαδή δεν τους βάζω στον επόμενο χώρο κάθε φορά με προτεραιότητα), αν υποθέσουμε πως στην πρώτη φορά γεμίζει η αυλή άρα και ο πίνακας της αλλά το κλιμακοστάσιο χωράει λιγότερους μαθητές από την αυλή στο πίνακα μας θα έχουμε τις πρώτες θέσεις (δηλαδή τους πρώτους δείκτες) καινούς (null) και μετά τους μαθητές που δεν χώρεσαν στο κλιμακοστάσιο, την επομένη φορά αν μπουν λιγότεροι μαθητές στην αυλή από αυτούς που βγήκαν πριν ο πινάκας μας θα έχει στην αρχή δείκτες που δείχνουν σε μαθητές μετά null δείκτες και μετά πάλι δείκτες που δείχνουν σε μαθητές, οπότε χρησιμοποιώ αυτήν την if.
Το καταλαβαίνω πως ο τρόπος που βγάζω μαθητές από την αυλή δεν είναι λογικός γιατί θα μπορούσε η exit της αυλής να λέει ποιος μαθητής θα βγει αντί για έτσι που το έκανα και εκτός από το ότι θα ήταν πιο σωστό από άποψη υλοποίησης δεν θα χρειαζόμουν και την συνάρτηση που χρησιμοποιώ για να πάρω τον πίνακα αλλά όταν έγγραφα τον κώδικα έτσι το σκέφτηκα εκείνη την στιγμή και δεν είχα χρόνο να το αλλάξω, οπότε όπως είπαν και στο list είπα να το γράψω στο readme αντί να το διορθώσω για να προλάβω να κάνω και την δεύτερη άσκηση.
Έπειτα με τον ίδιο τρόπο χρησιμοποιώντας αντίστοιχες συναρτήσεις για όσους μαθητές χωράνε στον αντίστοιχο όροφο ή μέχρι να μην έχω άλλους μαθητές στις σκάλες βγάζω μαθητές από τις σκάλες και τους βάζω στον αντίστοιχο όροφο που είναι και η τάξη τους.
Η συνάρτηση enter που δέχεται έναν μαθητή απλός καλεί την enter της άυλης χωρίς να ελέγχει αν χωράει γιατί αυτό το έχει ελέγξει ήδη η συνάρτηση που την κάλεσε.
Η συνάρτηση getNumberOfStudents επιστρέφει τον αριθμό των μαθητών που βρίσκονται ήδη στις τάξεις τους καλώντας για κάθε όροφο μια αντίστοιχη συνάρτηση και προσθέτοντας σε μια μεταβλητή τους μαθητές που έχουν μπει στις τάξεις τους του κάθε ορόφου.
Η συνάρτηση place δέχεται έναν δάσκαλο με τη μορφή δείκτη και καλεί μια αντίστοιχη συνάρτηση του ορόφου στον οποίο βρίσκεται η τάξη του δάσκαλου προκειμένου να μπει ο δάσκαλος στην τάξη του.
Η συνάρτηση print εκτυπώνει το σχολειό καλώντας αντίστοιχες συναρτήσεις για την αυλή, τις σκάλες και τους ορόφους.


YARD

Στην κλάση της άυλης έχω δυο ακέραιες μεταβλητές για την μεγίστη χωρητικότητα και τον αριθμό των μαθητών που βρίσκονται αυτή την στιγμή στην αυλή και έναν δείκτη σε δείκτη τύπου Student που θα τον χρησιμοποιήσω για να κρατάω τους μαθητές που βρίσκονται μέσα στην άυλη.
Ο constructor αρχικοποιει τις μεταβλητές που κρατάνε τον μέγιστο αριθμό μαθητών που χωράνε στην αυλή με τον αντίστοιχο αριθμό που δόθηκε και την μεταβλητή που κρατάει τον αριθμό των μαθητών που βρίσκονται αυτή την στιγμή στην αυλή με 0 αφού προς το παρόν η αυλή είναι άδεια. Επίσης βάζει τον δείκτη student να δείχνει σε έναν πινάκα από δείκτες σε αντικείμενα τύπου Student και αρχικοποιει τον κάθε δείκτη του πινάκα με NULL.
ΟΟ destructor φροντίζει για την σωστή αποδέσμευση της μνήμης που δεσμεύτηκε προκειμένου να κρατηθούν οι μαθητές.
Η enter δέχεται έναν μαθητή και τον βάζει στην πρώτη καινή θέση που θα βρει στον πίνακα με τους μαθητές και αλλάζει την τοποθεσία του μαθητή βάζοντας την ότι βρίσκεται στο προαύλιο.
Η exit δέχεται έναν μαθητή και βρίσκει στον πινάκα ποιος δείκτης δείχνει στην ίδια διεύθυνση μνήμης με αυτήν που δείχνει ο δείκτης που δείχνει στον μαθητή που θέλουμε να βγάλουμε και αφού τον βρει τον βγάζει κάνοντας τον δείκτη NULL.
Η print εκτυπώνει όλους τους μαθητές που βρίσκονται στην άυλη τρέχοντας τον πίνακα με τους μαθητές και καλώντας την αντίστοιχη print για κάθε μαθητή που βρίσκει.


STAIRCASE

Στην κλάση του κλιμακοστασίου έχω δυο ακέραιες μεταβλητές για την μεγίστη χωρητικότητα και τον αριθμό των μαθητών που βρίσκονται αυτή την στιγμή στο κλιμακοστάσιο και έναν δείκτη σε δείκτη τύπου Student που θα τον χρησιμοποιήσω για να κρατάω τους μαθητές που βρίσκονται μέσα στο κλιμακοστάσιο.
Όλες οι συναρτήσεις της λειτουργούν με αντίστοιχο τρόπο με αυτές της yard οπότε δεν θα τις ξανά εξηγήσω για να μην κουράσω.


FLOOR

Στην κλάση του ορόφου έχω αναπαραστήσει τις τάξεις με έναν πινάκα δεικτών 6 θέσεων σε αντικείμενα τύπου Classroom (είναι η κλάση για την τάξη) και τον διάδρομο με ένα αντικείμενο της κλάσης Corridor.
Ο constructor αρχικοποιει την μεταβλητή που κρατάει τον μέγιστο αριθμό μαθητών με την αντίστοιχη τιμή που του δόθηκε και την μεταβλητή που κρατάει τον αριθμό των μαθητών που μπήκαν στις τάξεις τους με 0. Επίσης στον πίνακα των τάξεων αρχικοποιει κάθε θέση δημιουργώντας ένα αντικείμενο τύπου Classroom και περνώντας την τιμή για τον μέγιστο αριθμό μαθητών μέσα στην τάξη και κάνοντας τον δείκτη να δείχνει στο αντικείμενο αυτό.
Ο destructor φροντίζει για την σωστή αποδέσμευση της μνήμης που δεσμεύθηκε για τις τάξεις.
Η enter καλεί την enter του corridor και έπειτα ελέγχει αν χωράει ο μαθητής να μπει στην τάξη του καλώντας την αντίστοιχη συνάρτηση της τάξης, αν χωράει τον βγάζει από τον διάδρομο και τον βάζει την τάξη του καλώντας τις αντίστοιχες συναρτήσεις.
Η canEnterFloor ελέγχει αν μπορεί να μπει ένας μαθητής στο όροφο ελέγχοντας αν χωράει στον διάδρομο του ορόφου και επιστρέφει true αν χωράει και false αν δεν χωράει.
Η place βρίσκει την τάξη του δάσκαλου που της δόθηκε και καλεί την αντίστοιχη συναρτά έτσι ώστε να μπει ο δάσκαλος στην τάξη του.
Η print εκτυπώνει τους μαθητές που είναι στον διάδρομο και τους μαθητές που είναι σε κάθε τάξη καλώντας τις αντίστοιχες συναρτήσεις του διάδρομου και της κάθε τάξης του πινάκα των τάξεων.


CORRIDOR

Στην κλάση του διαδρόμου έχω δυο ακέραιες μεταβλητές για την μεγίστη χωρητικότητα και τον αριθμό των μαθητών που βρίσκονται αυτή την στιγμή στον διάδρομο και έναν δείκτη σε δείκτη τύπου Student που θα τον χρησιμοποιήσω για να κρατάω τους μαθητές που βρίσκονται μέσα στον διάδρομο.
Όλες οι συναρτήσεις της λειτουργούν με αντίστοιχο τρόπο με αυτές της yard οπότε δεν θα τις ξανά εξηγήσω για να μην κουράσω.


CLASSROOM

Στην κλάση της τάξης έχω βάλει έναν δείκτη σε αντικείμενο τύπου teacher που θα δείχνει στο δάσκαλο της τάξης αν μπει τελικά δάσκαλος στην τάξη, έναν δείκτη σε δείκτη τύπου Student που θα τον χρησιμοποιήσω για να κρατάω τους μαθητές που βρίσκονται μέσα στην τάξη, μια μεταβλητή για να κρατάω τον μέγιστο αριθμό μαθητών που μπορεί να δεχτεί η τάξη και μια άλλη που κρατάει πόσοι μαθητές βρίσκονται τη συγκεκριμένη στιγμή στην τάξη
Ο constructor αρχικοποιει την μεταβλητή που κρατάει τον μέγιστο αριθμό μαθητών στην τάξη με την αντίστοιχη τιμή που δόθηκε, την μεταβλητή που κρατάει τους μαθητές που είναι ήδη στην τάξη με 0 και τον δείκτη που θα δείχνει τον δάσκαλο με null. Επίσης βάζει τον δείκτη student να δείχνει σε έναν πίνακα από δείκτες σε αντικείμενα τύπου Student και αρχικοποιει τον κάθε δείκτη του πινάκα με NULL.
Ο destructor αποδεσμεύει την μνήμη που δεσμεύθηκε για τους μαθητές και τον δάσκαλο.
Η canEnterClassroom ελέγχει αν χωράει να μπει ένας μαθητής στην τάξη και αν έχει μπει ο δάσκαλος μέσα και επιστρέφει true ή false αντίστοιχα.
Η enter δέχεται έναν μαθητή και τον βάζει στην πρώτη κενή θέση που θα βρει στον πινάκα με τους μαθητές και αλλάζει την τοποθεσία του μαθητή βάζοντας την ότι βρίσκεται στην τάξη.
Η place βάζει το δείκτη να δείχνει στον δάσκαλο και καλεί την αντίστοιχη συνάρτηση της κλάσης του δάσκαλου για να αλλάξει την μεταβλητή που αναπαριστά αν ο δάσκαλος είναι στην τάξη ή όχι
Η print εκτυπώνει τον δάσκαλο αν έχει μπει στην τάξη και όσους μαθητές έχουν μπει στην τάξη.


STUDENT 

Στην κλάση του μαθητή έχω βάλει δυο ακέραιους για να αποθηκεύω τον αριθμό του ορόφου που βρίσκεται η τάξη του μαθητή και τον αριθμό της τάξης αντίστοιχα και δυο αλφαριθμητικά, ένα για τον όνομα του μαθητή και ένα για το που βρίσκεται αυτή τη στιγμή ο μαθητής.
Ο constructor αρχικοποιει το όνομα, το που βρίσκεται ο μαθητής με "έκτος σχολικού κτίριου" και τον αριθμό του ορόφου της τάξης και την τάξη του μαθητή με τις αντίστοιχες που της δόθηκαν.
Η setIs αλλάζει τη τιμή της μεταβλητής is που αναπαριστά το που βρίσκεται ο μαθητής.

TEACHER

Στην κλάση του δάσκαλου έχω βάλει δυο ακέραιους για να αποθηκεύω τον αριθμό του ορόφου που βρίσκεται η τάξη του δάσκαλου και τον αριθμό της τάξης αντίστοιχα, ένα αλφαριθμητικό για το όνομα του και μια μεταβλητή τύπου bool για να ξέρω αν ο δάσκαλος είναι μέσα στην τάξη ή όχι (true = είναι μέσα στην τάξη).
O constructor αρχικοποιει το όνομα, τον αριθμό του ορόφου της τάξης και την τάξη του δασκάλου με τις αντίστοιχες που της δόθηκαν και την μεταβλητή inside με false που σημαίνει ότι ο δάσκαλος δεν είναι στην τάξη του.
H setInside κάνει την μεταβλητή inside true που σημαίνει ότι ο δάσκαλος μπήκε στην τάξη.


Οι συναρτήσεις που είναι inline σε κάθε κλάση απλός επιστρέφουν τις αντίστοιχες μεταβλητές.